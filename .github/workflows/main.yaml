name: Build, push, and deploy

on: [push]

env:
  IMAGE: docker.pkg.github.com/${{ github.repository }}/internarbeidsflatedecorator:${{ github.sha }}
  CI: true
  TZ: Europe/Oslo

jobs:
  build:
    name: Test and build
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/dev' && github.ref != 'refs/heads/dev-q1' && github.ref != 'refs/heads/master'
    steps:
      - uses: actions/checkout@v1
      - uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        run: |
          npm ci
          cd v2
          npm ci
          cd ../v2.1
          npm ci
      - name: Lint and Test
        run: |
          npm run lint
          npm run test
          cd v2.1
          npm run test
#          Den dagen vi lager tester for V2
#          cd v2
#          npm run test
      - name: Build
        run: |
          npm run build
          cd v2
          npm run build
          cd ../v2.1
          npm run build

  build-and-push:
    name: Build and push Docker container
    if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Publish Docker image
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          docker build --tag ${IMAGE} .
          docker login docker.pkg.github.com -u ${GITHUB_REPOSITORY} -p ${GITHUB_TOKEN}
          docker push ${IMAGE}

  deploy-qa:
    name: Deploy to preprod
    needs: build-and-push
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        namespace: [q0, q1, q6]
    steps:
      - uses: actions/checkout@v1
      - uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          PRINT_PAYLOAD: true
          CLUSTER: dev-fss
          RESOURCE: .nais/qa-template.yaml
          VAR: namespace=${{matrix.namespace}}

  deploy-prod:
    name: Deploy to prod
    needs: build-and-push
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          PRINT_PAYLOAD: true
          CLUSTER: prod-fss
          RESOURCE: .nais/prod.yaml

  deploy-gh-pages:
    name: Deploy til gh-pages
    needs: build-and-push
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        run: |
          npm ci
          cd v2
          npm ci
          cd ../v2.1
          npm ci
      - name: Build
        run: |
          npm run build
          cd v2
          npm run build
          cd ../v2.1
          npm run build
      - name: Bundle
        run: |
          cp -r v2/build build/v2
          cp -r v2.1/build build/v2.1
          ls build
      - name: Deploy gh-pages
        uses: peaceiris/actions-gh-pages@v2.9.0
        env:
          ACTIONS_DEPLOY_KEY: ${{ secrets.ACTIONS_DEPLOY_KEY }}
          PUBLISH_BRANCH: gh-pages
          PUBLISH_DIR: build
